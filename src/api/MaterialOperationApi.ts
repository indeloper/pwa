import BaseApi from "./BaseApi";
import { ref } from 'vue';

export default class MaterialOperationApi extends BaseApi<any> {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    static items = ref<any[]>([]);
    static loading = ref(false);
    static progress = ref<{ percentage: number; current: number; total: number; chunk_size?: number } | null>(null);
    static completed = ref(false);
    static error = ref<string | null>(null);

    private static streamHandle: { close: () => void } | null = null;

    static fetchAllStream() {
        // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (this.streamHandle) {
            console.log('‚ö†Ô∏è –ü–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π');
            return {
                items: this.items,
                loading: this.loading,
                progress: this.progress,
                completed: this.completed,
                error: this.error,
                stop: () => this.stopStream()
            };
        }

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.items.value = [];
        this.loading.value = true;
        this.progress.value = null;
        this.completed.value = false;
        this.error.value = null;

        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∫:', '/heavy-data-test');
        
        const api = new MaterialOperationApi();
        this.streamHandle = api.openEventStream('/heavy-data-test', {
            withCredentials: true,
            onOpen: (ev) => {
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', ev);
            },
            onMessage: (data) => {
                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
                // –í—Ä–µ–º–µ–Ω–Ω–æ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ
                this.items.value.push(data);
            },
            events: {
                start: (info) => {
                    console.log('üèÅ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É:', info);
                    this.loading.value = true;
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ start —Å–æ–±—ã—Ç–∏—è
                    this.progress.value = {
                        percentage: 0,
                        current: 0,
                        total: info.total || 0,
                        chunk_size: info.chunk_size
                    };
                },
                data: (chunk) => {
                    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${chunk.items?.length || 0} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≥—Ä–µ—Å—Å: ${chunk.progress?.percentage || 0}%`);
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º lodash –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if (chunk.items) {
                        this.items.value.push(...chunk.items);
                    }
                    if (chunk.progress) {
                        this.progress.value = chunk.progress;
                    }
                },
                complete: (result) => {
                    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
                    this.loading.value = false;
                    this.completed.value = true;
                    // API —Å–∞–º –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫
                    this.streamHandle?.close();
                    this.streamHandle = null;
                }
            },
            onError: (ev) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:', ev);
                this.error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
                this.loading.value = false;
                // API —Å–∞–º –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                this.streamHandle?.close();
                this.streamHandle = null;
            }
        });
        
        console.log('üîó StreamHandle —Å–æ–∑–¥–∞–Ω:', this.streamHandle);

        return {
            items: this.items,
            loading: this.loading,
            progress: this.progress,
            completed: this.completed,
            error: this.error,
            stop: () => this.stopStream()
        };
    }

    private static stopStream() {
        if (this.streamHandle) {
            this.streamHandle.close();
            this.streamHandle = null;
            this.loading.value = false;
        }
    }

    static async fetchData() {
        const api = new MaterialOperationApi();
        return await api.getJson<any>('/material-operations-data');
    }
}