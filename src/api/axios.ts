import axios, { type AxiosInstance, type AxiosResponse, type InternalAxiosRequestConfig } from 'axios';
import router from '../router';

const api: AxiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api',
  timeout: 100000,
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

api.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ cookie –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (config.method !== 'get') {
      const csrfToken = getCsrfTokenFromCookie();
      if (csrfToken) {
        config.headers['X-XSRF-TOKEN'] = csrfToken;
        console.log('üîê Added CSRF token to request:', csrfToken.substring(0, 10) + '...');
      } else {
        console.warn('‚ö†Ô∏è No CSRF token found in cookies');
      }
    }
    
    return config;
  },
  (error) => {
    console.error('Request Error:', error);
    return Promise.reject(error);
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
function getCsrfTokenFromCookie(): string | null {
  const cookies = document.cookie.split(';');
  for (let cookie of cookies) {
    const [name, value] = cookie.trim().split('=');
    if (name === 'XSRF-TOKEN') {
      return decodeURIComponent(value);
    }
  }
  return null;
}

api.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  async (error) => {
    console.error('‚ùå Response Error:', error.response?.status, error.config?.url, error.response?.data);
    
    if (error.response?.status === 401) {
      console.log('üîí Unauthorized - redirecting to login');
      router.push('/login');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ CSRF Token Mismatch - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
    if (error.response?.status === 419 && !error.config._retry) {
      console.log('üîÑ CSRF Token Mismatch - attempting to refresh token');
      error.config._retry = true; // –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
      
      try {
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF cookie –±–µ–∑ interceptor'–æ–≤
        const csrfApi = axios.create({
          baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api',
          withCredentials: true,
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
        });
        
        console.log('üç™ Getting new CSRF cookie...');
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π CSRF cookie
        const csrfResponse = await csrfApi.get('/sanctum/csrf-cookie');
        console.log('‚úÖ CSRF cookie response:', csrfResponse.status);
        
        console.log('üîÑ Retrying original request...');
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return api.request(error.config);
      } catch (csrfError) {
        console.error('üí• Failed to refresh CSRF token:', csrfError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ª–æ–≥–∏–Ω
        router.push('/login');
        return Promise.reject(error);
      }
    } else if (error.response?.status === 419 && error.config._retry) {
      console.log('üîÑ CSRF retry already attempted - giving up');
    }
    
    return Promise.reject(error);
  }
);

export default api;
