import router from "../router";
import { useAuthApi } from "./useAuthApi";
import { computed } from "vue";
import type { LoginRequest, LoginResponse } from "../types/auth";
import { UserAdapter } from "../models/adapters/UserAdapter";
import type User from "../models/User";

export function useAuth() {
    const authApi = useAuthApi();

    const login = async (email: string, password: string): Promise<LoginResponse> => {
        const request: LoginRequest = { email, password };
        console.log('üîë Starting login process...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF cookie –¥–ª—è Sanctum (–≤–∞–∂–Ω–æ –¥–ª—è cookie-based auth)
        console.log('üç™ Getting CSRF cookie...');
        await authApi.get('/sanctum/csrf-cookie');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await new Promise(resolve => setTimeout(resolve, 100));
        
        console.log('üöÄ Attempting login...');
        const response = await authApi.post<LoginResponse>('/login', request);
        
        console.log('‚úÖ Login successful');
        router.push('/');

        return response;
    }



    const logout = async (): Promise<void> => {
        try {
            console.log('üö™ Starting logout process...');
            const response = await authApi.post('/logout');
            console.log('‚úÖ Logout response:', response);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ logout –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
            console.log('üßπ Clearing all authentication cookies...');
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫—É–∫–∏
            const cookiesToClear = ['laravel_session', 'XSRF-TOKEN', 'remember_web'];
            cookiesToClear.forEach(cookieName => {
                // –û—á–∏—â–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞
                document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
                // –û—á–∏—â–∞–µ–º –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname};`;
                console.log(`üóëÔ∏è Cleared cookie: ${cookieName}`);
            });
            
            console.log('‚úÖ Logout completed successfully');
        } catch (error) {
            console.error('‚ùå Logout error:', error);
            
            // –î–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π logout –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—É–∫–∏
            console.log('üßπ Force clearing cookies due to logout error...');
            const cookiesToClear = ['laravel_session', 'XSRF-TOKEN', 'remember_web'];
            cookiesToClear.forEach(cookieName => {
                document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
                document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname};`;
            });
        } finally {
            router.push('/login');
        }
    }

    const getUser = async (): Promise<User> => {
        const response = await authApi.get('/me');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ
        if (!response || !response.id) {
            console.log('‚ùå No user data in response');
            throw new Error('No user data');
        }
        
        const user = UserAdapter.adapt(response);
        return user;
    }

    const isAuthenticated = computed(() => {
        // –ü—Ä–∏ cookie-based auth —Ä–µ—à–∞–π—Ç–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Ç–æ—Ä–∞
        return true;
    });

    return { login, logout, getUser, isAuthenticated };
}