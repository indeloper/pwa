import { describe, it, expect, beforeEach } from 'vitest';
import { mount } from '@vue/test-utils';
import { ref } from 'vue';
import axios from 'axios';
import { useApi } from '../useApi';

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å JSONPlaceholder
const testApi = axios.create({
  baseURL: 'https://jsonplaceholder.typicode.com',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é useApi —Å —Ä–µ–∞–ª—å–Ω—ã–º API
function createTestUseApi() {
  const loading = ref(false);
  const error = ref<string | null>(null);

  // GET –∑–∞–ø—Ä–æ—Å
  const get = async <T = any>(url: string, config?: any): Promise<T | null> => {
    loading.value = true;
    error.value = null;
    
    try {
      const response = await testApi.get<T>(url, config);
      return response.data;
    } catch (err: any) {
      error.value = err.response?.data?.message || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      return null;
    } finally {
      loading.value = false;
    }
  };

  // POST –∑–∞–ø—Ä–æ—Å
  const post = async <T = any>(url: string, data?: any, config?: any): Promise<T | null> => {
    loading.value = true;
    error.value = null;
    
    try {
      const response = await testApi.post<T>(url, data, config);
      return response.data;
    } catch (err: any) {
      error.value = err.response?.data?.message || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      return null;
    } finally {
      loading.value = false;
    }
  };

  // PUT –∑–∞–ø—Ä–æ—Å
  const put = async <T = any>(url: string, data?: any, config?: any): Promise<T | null> => {
    loading.value = true;
    error.value = null;
    
    try {
      const response = await testApi.put<T>(url, data, config);
      return response.data;
    } catch (err: any) {
      error.value = err.response?.data?.message || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      return null;
    } finally {
      loading.value = false;
    }
  };

  // PATCH –∑–∞–ø—Ä–æ—Å
  const patch = async <T = any>(url: string, data?: any, config?: any): Promise<T | null> => {
    loading.value = true;
    error.value = null;
    
    try {
      const response = await testApi.patch<T>(url, data, config);
      return response.data;
    } catch (err: any) {
      error.value = err.response?.data?.message || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      return null;
    } finally {
      loading.value = false;
    }
  };

  // DELETE –∑–∞–ø—Ä–æ—Å
  const del = async <T = any>(url: string, config?: any): Promise<T | null> => {
    loading.value = true;
    error.value = null;
    
    try {
      const response = await testApi.delete<T>(url, config);
      return response.data;
    } catch (err: any) {
      error.value = err.response?.data?.message || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      return null;
    } finally {
      loading.value = false;
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = () => {
    error.value = null;
  };

  return {
    loading,
    error,
    get,
    post,
    put,
    patch,
    delete: del,
    clearError
  };
}

describe('useApi - –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ JSONPlaceholder', () => {
  let wrapper: any;

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∞–±–ª–∞
    wrapper = mount({
      template: '<div></div>',
      setup() {
        return createTestUseApi();
      }
    });
  });

  describe('GET –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID', async () => {
      const { get } = wrapper.vm;
      const result = await get('/posts/1');

      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:');
      console.log('üì° URL:', '/posts/1');
      console.log('üì¶ –û—Ç–≤–µ—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(result).toBeTruthy();
      expect(result.id).toBe(1);
      expect(result.title).toBeTruthy();
      expect(result.body).toBeTruthy();
      expect(result.userId).toBeTruthy();
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤', async () => {
      const { get } = wrapper.vm;
      const result = await get('/posts');

      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤:');
      console.log('üì° URL:', '/posts');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:', result?.length);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBeGreaterThan(0);
      expect(result[0]).toHaveProperty('id');
      expect(result[0]).toHaveProperty('title');
      expect(result[0]).toHaveProperty('body');
      expect(result[0]).toHaveProperty('userId');
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å –ª–∏–º–∏—Ç–æ–º', async () => {
      const { get } = wrapper.vm;
      const result = await get('/posts', { params: { _limit: 5 } });

      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å —Å –ª–∏–º–∏—Ç–æ–º:');
      console.log('üì° URL:', '/posts?_limit=5');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:', result?.length);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBeLessThanOrEqual(5);
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É', async () => {
      const { get } = wrapper.vm;
      const result = await get('/posts/1/comments');

      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:');
      console.log('üì° URL:', '/posts/1/comments');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', result?.length);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBeGreaterThan(0);
      expect(result[0]).toHaveProperty('id');
      expect(result[0]).toHaveProperty('postId');
      expect(result[0]).toHaveProperty('email');
      expect(result[0]).toHaveProperty('body');
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å', async () => {
      const { get } = wrapper.vm;
      const result = await get('/nonexistent/999');

      console.log('‚ùå GET –∑–∞–ø—Ä–æ—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:');
      console.log('üì° URL:', '/nonexistent/999');
      console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(result).toBe(null);
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBeTruthy();
    });
  });

  describe('POST –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', async () => {
      const postData = { 
        title: 'Test Post Title', 
        body: 'Test Post Body', 
        userId: 1 
      };
      
      const { post } = wrapper.vm;
      const result = await post('/posts', postData);

      console.log('‚úÖ POST –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:');
      console.log('üì° URL:', '/posts');
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', postData);
      console.log('üì¶ –û—Ç–≤–µ—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(result).toBeTruthy();
      expect(result.id).toBe(101); // JSONPlaceholder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID
      expect(result.title).toBe(postData.title);
      expect(result.body).toBe(postData.body);
      expect(result.userId).toBe(postData.userId);
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', async () => {
      const commentData = {
        postId: 1,
        name: 'Test Commenter',
        email: 'test@example.com',
        body: 'This is a test comment'
      };

      const { post } = wrapper.vm;
      const result = await post('/comments', commentData);

      console.log('‚úÖ POST –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:');
      console.log('üì° URL:', '/comments');
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', commentData);
      console.log('üì¶ –û—Ç–≤–µ—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(result).toBeTruthy();
      expect(result.id).toBe(501); // JSONPlaceholder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID
      expect(result.postId).toBe(commentData.postId);
      expect(result.name).toBe(commentData.name);
      expect(result.email).toBe(commentData.email);
      expect(result.body).toBe(commentData.body);
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });
  });

  describe('PUT –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç', async () => {
      const putData = { 
        id: 1, 
        title: 'Updated Post Title', 
        body: 'Updated Post Body', 
        userId: 1 
      };
      
      const { put } = wrapper.vm;
      const result = await put('/posts/1', putData);

      console.log('‚úÖ PUT –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:');
      console.log('üì° URL:', '/posts/1');
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', putData);
      console.log('üì¶ –û—Ç–≤–µ—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(result).toBeTruthy();
      expect(result.id).toBe(putData.id);
      expect(result.title).toBe(putData.title);
      expect(result.body).toBe(putData.body);
      expect(result.userId).toBe(putData.userId);
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });
  });

  describe('PATCH –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç', async () => {
      const patchData = { title: 'Partially Updated Title' };
      
      const { patch } = wrapper.vm;
      const result = await patch('/posts/1', patchData);

      console.log('‚úÖ PATCH –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:');
      console.log('üì° URL:', '/posts/1');
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', patchData);
      console.log('üì¶ –û—Ç–≤–µ—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      expect(result).toBeTruthy();
      expect(result.id).toBe(1);
      expect(result.title).toBe(patchData.title);
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
      expect(result.body).toBeTruthy();
      expect(result.userId).toBeTruthy();
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });
  });

  describe('DELETE –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', async () => {
      const { delete: del } = wrapper.vm;
      const result = await del('/posts/1');

      console.log('‚úÖ DELETE –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:');
      console.log('üì° URL:', '/posts/1');
      console.log('üì¶ –û—Ç–≤–µ—Ç:', result);
      console.log('‚è±Ô∏è Loading:', wrapper.vm.loading);
      console.log('‚ùå Error:', wrapper.vm.error);
      console.log('---');

      // JSONPlaceholder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
      expect(result).toEqual({});
      expect(wrapper.vm.loading).toBe(false);
      expect(wrapper.vm.error).toBe(null);
    });
  });

  describe('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å loading –≤ true –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞', async () => {
      const { get } = wrapper.vm;
      const promise = get('/posts/1');

      console.log('‚è±Ô∏è –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏:');
      console.log('üì° URL:', '/posts/1');
      console.log('üîÑ Loading –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', wrapper.vm.loading);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ loading —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true
      expect(wrapper.vm.loading).toBe(true);

      await promise;
      console.log('‚úÖ Loading –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', wrapper.vm.loading);
      console.log('---');

      expect(wrapper.vm.loading).toBe(false);
    });
  });

  describe('–û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–∑–æ–≤–µ clearError', async () => {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É
      const { get, clearError } = wrapper.vm;
      await get('/nonexistent/999');

      console.log('üßπ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫:');
      console.log('üì° URL:', '/nonexistent/999');
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏:', wrapper.vm.error);

      expect(wrapper.vm.error).toBeTruthy();

      // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É
      clearError();
      console.log('‚úÖ –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', wrapper.vm.error);
      console.log('---');

      expect(wrapper.vm.error).toBe(null);
    });
  });

  describe('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã JSONPlaceholder', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
      const { get } = wrapper.vm;
      const result = await get('/users');

      console.log('üë• GET –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      console.log('üì° URL:', '/users');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', result?.length);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBe(10); // JSONPlaceholder –∏–º–µ–µ—Ç 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      expect(result[0]).toHaveProperty('id');
      expect(result[0]).toHaveProperty('name');
      expect(result[0]).toHaveProperty('email');
      expect(result[0]).toHaveProperty('username');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å–±–æ–º—ã', async () => {
      const { get } = wrapper.vm;
      const result = await get('/albums');

      console.log('üì∑ GET –∑–∞–ø—Ä–æ—Å –∞–ª—å–±–æ–º–æ–≤:');
      console.log('üì° URL:', '/albums');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª—å–±–æ–º–æ–≤:', result?.length);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBe(100); // JSONPlaceholder –∏–º–µ–µ—Ç 100 –∞–ª—å–±–æ–º–æ–≤
      expect(result[0]).toHaveProperty('id');
      expect(result[0]).toHaveProperty('title');
      expect(result[0]).toHaveProperty('userId');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', async () => {
      const { get } = wrapper.vm;
      const result = await get('/photos', { params: { _limit: 3 } });

      console.log('üñºÔ∏è GET –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:');
      console.log('üì° URL:', '/photos?_limit=3');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', result?.length);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBeLessThanOrEqual(3);
      expect(result[0]).toHaveProperty('id');
      expect(result[0]).toHaveProperty('title');
      expect(result[0]).toHaveProperty('url');
      expect(result[0]).toHaveProperty('thumbnailUrl');
      expect(result[0]).toHaveProperty('albumId');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏', async () => {
      const { get } = wrapper.vm;
      const result = await get('/todos', { params: { _limit: 5 } });

      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á:');
      console.log('üì° URL:', '/todos?_limit=5');
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á:', result?.length);
      console.log('---');

      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBeLessThanOrEqual(5);
      expect(result[0]).toHaveProperty('id');
      expect(result[0]).toHaveProperty('title');
      expect(result[0]).toHaveProperty('completed');
      expect(result[0]).toHaveProperty('userId');
    });
  });
});
